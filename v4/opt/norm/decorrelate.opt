# =============================================================================
# decorrelate.opt contains rewrite patterns that try to eliminate correlated
# subqueries and correlated join inputs. A correlated subquery is a subquery
# with one or more unbound columns. For example:
#
#   SELECT * FROM a WHERE (SELECT b.y FROM b WHERE a.x=b.x) < 5
#
# A correlated join has unbound columns in its right input that refer to
# columns in its left input. For example (not actually possible in SQL):
#
#   SELECT * FROM a, (SELECT * FROM b WHERE a.x=b.x)
#
# Rewrite patterns "hoist" or "pull up" subqueries so that they are directly
# joined with the outer relation to which they are bound. Other patterns try
# to "push down" correlated joins (apply) until they disappear or can no
# longer be pushed further. An apply join can be rewritten as a non-apply join
# once there are no unbound columns in the right side of the join that are
# bound by the left side of the join (i.e. the inputs are not "correlated").
#
# Together, these pattens tend to eliminate unnecessary correlation, which has
# the desirable effect of eliminating patterns that can only be executed using
# often expensive nested loops, and instead open up other physical plan
# possibilities.
#
# In addition to the patterns in this file, the HoistScalarSubquery pattern
# in factory.go assists in decorrelation, as it hoists subqueries embedded
# within scalar expressions.
# =============================================================================


# DecorrelateJoin maps an apply join into the corresponding join without an
# apply if the right side of the join is not correlated the left side. This
# allows the optimizer to consider additional physical join operators that are
# unable to handle correlated inputs.
#
# NOTE: Keep this before other decorrelation patterns, as if the correlated
#       join can be removed first, it avoids unnecessarily matching other
#       patterns that only exist to get to this pattern.
[DecorrelateJoin, Normalize]
(JoinApply
    $left:*
    $right:* & ^(IsCorrelated $right $left)
    $on:*
)
=>
(RemoveApply (OpName) $left $right $on)

# HoistSelectExists extracts existential subqueries from Select filters,
# turning them into semi-joins. This eliminates the subquery, which is often
# expensive to execute and restricts the optimizer's plan choices.
[HoistSelectExists, Normalize]
(Select
    $input:*
    $filter:(Filters
        $list:[ ... $exists:(Exists $subquery:*) ... ]
    )
)
=>
(SemiJoinApply
    $input
    $subquery
    (Filters (RemoveListItem $list $exists))
)

# HoistSelectNotExists extracts non-existential subqueries from Select filters,
# turning them into semi-joins. This eliminates the subquery, which is often
# expensive to execute and restricts the optimizer's plan choices.
[HoistSelectNotExists, Normalize]
(Select
    $input:*
    $filter:(Filters
        $list:[ ... $exists:(Not (Exists $subquery:*)) ... ]
    )
)
=>
(AntiJoinApply
    $input
    $subquery
    (Filters (RemoveListItem $list $exists))
)

# HoistSelectFilterSubquery scans select filter lists for subqueries and joins
# them with the select input. This eliminates the subquery, which is often
# expensive to execute and restricts the optimizer's plan choices.
[HoistSelectFilterSubquery, Normalize]
(Select
    $input:*
    (Filters
        $list:[... $subquery:(Subquery $subqueryInput:* $projection:*) ...]
    )
)
=>
(InnerJoinApply
    $input
    $subqueryInput
    (Filters (ReplaceListItem $list $subquery $projection))
)

# HoistJoinFilterSubquery scans join filter lists for subqueries and joins
# them with the existing join output. This eliminates the subquery, which is
# often expensive to execute and restricts the optimizer's plan choices.
[HoistJoinFilterSubquery, Normalize]
(Join
    $left:*
    $right:*
    (Filters
        $list:[ ... $subquery:(Subquery $subqueryInput:* $projection:*) ... ]
    )
)
=>
((OpName)
    $left
    (InnerJoinApply
        $right
        $subqueryInput
        (True)
    )
    (Filters (ReplaceListItem $list $subquery $projection))
)

# TryDecorrelateProject "pushes down" the join apply into the project operator,
# in order to eliminate any correlation between the projection list and the
# left side of the join, and also to keep "digging" down to find and eliminate
# other unnecessary correlation. Eventually, the hope is to trigger the
# DecorrelateJoin pattern to turn the JoinApply operator into a JoinNoApply
# operator.
# TODO(andy): Add a pattern for outer apply joins.
[TryDecorrelateProject, Normalize]
(InnerJoinApply
    $left:*
    $right:(Project $input:* $projections:*)
    $on:*
)
=>
(Select
    (Project
        ((OpName)
            $left
            $input
            (True)
        )
        (AppendColumnProjections $projections $left)
    )
    $on
)

# TryDecorrelateSelect "pushes down" the join apply into the select operator,
# in order to eliminate any correlation between the select filter list and the
# left side of the join, and also to keep "digging" down to find and eliminate
# other unnecessary correlation. Eventually, the hope is to trigger the
# DecorrelateJoin pattern to turn the JoinApply operator into a JoinNoApply
# operator.
[TryDecorrelateSelect, Normalize]
(JoinApply
    $left:*
    $right:(Select $input:* $filter:*)
    $on:*
)
=>
((OpName)
    $left
    $input
    (ConcatFilterConditions $on $filter)
)

# TryDecorrelateScalarGroupBy "pushes down" the join apply into the scalar
# groupby operator, in order to eliminate any correlation between the groupby
# groupings/aggregations lists and the left side of the join, and also to keep
# "digging" down to find and eliminate other unnecessary correlation. The join
# apply becomes a left outer join apply in order to preserve the cardinality
# of the original join even when $left doesn't have $input matches. Eventually,
# the hope is to trigger the DecorrelateJoin pattern to turn the JoinApply
# operator into a JoinNoApply operator.
# TODO(andy): think about outer apply join cases.
[TryDecorrelateScalarGroupBy, Normalize]
(InnerJoinApply | SemiJoinApply
    $left:*
    $right:(GroupBy
        $input:*
        (Projections $items:* & (IsEmptyList $items))
        $aggregations:*
    )
    $on:*
)
=>
(Select
    (GroupBy
        (LeftJoinApply
            $left
            $input
            (True)
        )
        (ColumnProjections $left)
        $aggregations
    )
    $on
)
