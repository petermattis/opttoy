# =============================================================================
# norm.opt contains patterns, in addition to those contained elsewhere, that
# transform the expression tree into a normalized, canonical form.
# =============================================================================


# NormalizeVar ensures that variable references are on the left side of
# equality and inequality operators.
[NormalizeVar, Normalize]
(Eq | Ne
    $left:^(Variable)
    $right:(Variable)
)
=>
((OpName) $right $left)

# NormalizeVarOrder establishes an arbitrary, but canonical ordering of
# equality and inequality operators where both operands are variables.
[NormalizeVarOrder, Normalize]
(Eq | Ne
    $left:(Variable)
    $right:(Variable) & (IsLowerExpr $right $left)
)
=>
((OpName) $right $left)

# NormalizeInequalityVar ensures that variable references are on the left side
# of inequality operators.
[NormalizeInequalityVar, Normalize]
(Le | Lt | Ge | Gt
    $left:^(Variable)
    $right:(Variable)
)
=>
(CommuteInequalityExpr (OpName) $left $right)

# NormalizeInequalityVarOrder establishes an arbitrary, but canonical ordering
# of inequality operators where both operands are variables.
[NormalizeInequalityVarOrder, Normalize]
(Le | Lt | Ge | Gt
    $left:(Variable)
    $right:(Variable) & (IsLowerExpr $right $left)
)
=>
(CommuteInequalityExpr (OpName) $left $right)

# EliminateProject discards the unnecessary project operator when the projected
# columns are the same as the input operand's columns.
[EliminateProject, Normalize]
(Project $input:* $projections:* & (ProjectsSameCols $projections $input)) => $input

# EliminateSemiAntiJoinProject discards the unnecessary project operator in the
# right side of a semi/anti join, since those operators do not project columns
# on that side of the join.
[EliminateSemiAntiJoinProject, Normalize]
(SemiJoinApply | AntiJoinApply
    $left:*
    $right:(Project $input:* *)
    $on:(True)
)
=>
((OpName) $left $input (True))
